import sqlite3

class Биржа:
    def __init__(self, имя_базы_данных='биржа.db'):
        self.соединение = sqlite3.connect(имя_базы_данных)
        self.создать_таблицы()

    def создать_таблицы(self):
        запрос_создания_таблиц = '''
        CREATE TABLE IF NOT EXISTS клиенты (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            имя TEXT NOT NULL,
            выручка INTEGER NOT NULL
        );

        CREATE TABLE IF NOT EXISTS транзакции (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            клиент_id INTEGER NOT NULL,
            сумма INTEGER NOT NULL,
            FOREIGN KEY (клиент_id) REFERENCES клиенты(id)
        );

        CREATE TABLE IF NOT EXISTS проекты (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            название TEXT NOT NULL,
            статус TEXT NOT NULL
        );
        '''
        self.соединение.execute(запрос_создания_таблиц)
        self.соединение.commit()

    def добавить_клиента(self, имя, выручка):
        запрос = 'INSERT INTO клиенты (имя, выручка) VALUES (?, ?);'
        self.соединение.execute(запрос, (имя, выручка))
        self.соединение.commit()

    def добавить_транзакцию(self, клиент_id, сумма):
        запрос = 'INSERT INTO транзакции (клиент_id, сумма) VALUES (?, ?);'
        self.соединение.execute(запрос, (клиент_id, сумма))
        self.соединение.commit()

    def добавить_проект(self, название, статус):
        запрос = 'INSERT INTO проекты (название, статус) VALUES (?, ?);'
        self.соединение.execute(запрос, (название, статус))
        self.соединение.commit()

    def получить_выручку(self):
        запрос = 'SELECT SUM(выручка) FROM клиенты;'
        результат = self.соединение.execute(запрос).fetchone()
        return результат[0] if результат else 0

    def получить_историю_транзакций(self, клиент_id):
        запрос = 'SELECT сумма FROM транзакции WHERE клиент_id = ?;'
        результат = self.соединение.execute(запрос, (клиент_id,)).fetchall()
        return [сумма[0] for сумма in результат]

    def получить_активные_проекты(self):
        запрос = 'SELECT название FROM проекты WHERE статус = "активен";'
        результат = self.соединение.execute(запрос).fetchall()
        return [проект[0] for проект in результат]


# Пример использования
биржа = Биржа()

# Добавление клиентов
биржа.добавить_клиента('Клиент1', 1000)
биржа.добавить_клиента('Клиент2', 1500)

# Добавление транзакций
биржа.добавить_транзакцию(1, 200)
биржа.добавить_транзакцию(2, 300)

# Добавление проектов
биржа.добавить_проект('Проект1', 'активен')
биржа.добавить_проект('Проект2', 'завершен')

# Получение выручки
выручка = биржа.получить_выручку()
print("Общая выручка:", выручка)

# Получение истории транзакций
история_транзакций = биржа.получить_историю_транзакций(1)
print("История транзакций для клиента 1:", история_транзакций)

# Получение активных проектов
активные_проекты = биржа.получить_активные_проекты()
print("Активные проекты:", активные_проекты)
